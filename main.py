import asyncio
import random
import string
import datetime
import aiofiles
from pyexpat.errors import messages

import dictionaries

from telebot.async_telebot import AsyncTeleBot
import os
import sqlite3
from telebot import types
import json
import time

os.getenv('')

token = os.getenv('BOT_TOKEN')
bot = AsyncTeleBot(token)

conn = sqlite3.connect('bunker.db', check_same_thread=False)
c = conn.cursor()


def create_referral_chat_link(chat_id):
    link = f'https://t.me/Bunkerbe_bot?start={chat_id}'
    return link


def create_user_link(user_id, user_name):
    link = f'<a href="tg://openmessage?user_id={user_id}">{user_name}</a>'
    return link


c.execute('''CREATE TABLE IF NOT EXISTS users(
    user_id INTEGER PRIMARY KEY,
    games_played INTEGER DEFAULT 0,
    win_games INTEGER DEFAULT 0,
    points INTEGER DEFAULT 0,
    is_in_game INTEGER DEFAULT 0,
    is_banned BOOLEAN DEFAULT False,
    registration_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    theme TEXT DEFAULT 'classic')''')

card_name_translation = {
    'baggage': '–ë–∞–≥–∞–∂',
    'health': '–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è',
    'profession': '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è',
    "skills": "–ù–∞–≤—ã–∫",
    'facts': '–§–∞–∫—Ç',
    'hobby': '–•–æ–±–±–∏',
    'biology': '–ë–∏–æ–ª–æ–≥–∏—è'
}


class IsInGameNow:
    def __init__(self):
        pass

    ACTIVE = "active"  # –ò–¥—ë—Ç –Ω–∞–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥—É
    INACTIVE = 'inactive'  # –ò–≥—Ä–∞ –Ω–µ –∏–¥—ë—Ç, –Ω–∞–±–æ—Ä –Ω–µ –∏–¥—ë—Ç
    IN_GAME = 'in_game'  # –ò–¥—ë—Ç –∏–≥—Ä–∞ –±–µ–∑ –Ω–∞–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤


class Discussion:
    def __init__(self):
        pass

    stop = "stop"  # –ò–≥—Ä–æ–∫ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è
    in_discussion = "in_discussion"  # –ò–≥—Ä–æ–∫ —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã
    not_in_discussion = "not_in_discussion"  # –ò–≥—Ä–æ–∫ —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã


c.execute(f'''CREATE TABLE IF NOT EXISTS chats(
chat_id INTEGER PRIMARY KEY,
is_in_game  TEXT DEFAULT "{IsInGameNow.INACTIVE}",
catastrophe INTEGER DEFAULT 0,
last_message_id INTEGER DEFAULT 0,
chat_name TEXT,
discussion_time INTEGER DEFAULT 60,
open_time INTEGER DEFAULT 60,
voting_time INTEGER DEFAULT 60,
delete_message BOOLEAN DEFAULT 1)''')

c.execute(f'''CREATE TABLE IF NOT EXISTS admins(
user_id INTEGER PRIMARY KEY DEFAULT 0,
can_change_status_of_game BOOLEAN DEFAULT False,
can_ban_people BOOLEAN DEFAULT False,
is_main BOOLEAN DEFAULT False )''')

c.execute(f'''CREATE TABLE IF NOT EXISTS admin_info (
reserv_code TEXT PRIMARY KEY,
game_stop BOOLEAN DEFAULT False)''')  # False - –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–≥—Ä—ã, True - –Ω–µ–ª—å–∑—è

user_cards = ['profession', 'health', 'baggage', "skills", 'facts', 'hobby', 'biology']


async def load_config():
    with open("classic.json", 'r', encoding='utf-8') as f:
        for_return = json.load(f)
    return for_return


async def check_cards(user_id, table_chat_id):
    opened_cards = []
    closed_cards = []
    for card in user_cards:
        c.execute(f'''SELECT {card}, {card}_on FROM chat_{table_chat_id} WHERE user_id = ?''', (user_id,))
        result = c.fetchall()[0]
        if int(result[1]) == 1:
            opened_cards.append((card, result))
        elif int(result[1]) == 0:
            closed_cards.append((card, result))
    return opened_cards, closed_cards


async def get_all_cards(user_id, table_chat_id):
    all_cards = []
    for card in user_cards:
        c.execute(f'''SELECT {card} FROM chat_{table_chat_id} WHERE user_id = ?''', (user_id,))
        result = c.fetchone()[0]
        all_cards.append(result)
    return all_cards



async def set_can_open(table_chat_id: int, value: bool, user_id):
    if user_id is None:
        c.execute(f'''UPDATE chat_{table_chat_id} SET can_open = {value}''')
        conn.commit()
        return
    c.execute(f'''UPDATE chat_{table_chat_id} SET can_open = {value} WHERE user_id = ?''', (user_id,))
    conn.commit()
    return


async def is_alive(table_chat_id):
    c.execute(f'''SELECT user_id, user_title FROM chat_{table_chat_id} WHERE is_alive = ?''', (True,))
    result = c.fetchall()
    return result


async def is_dead(table_chat_id):
    c.execute(f'''SELECT user_id, user_title FROM chat_{table_chat_id} WHERE is_alive = ?''', (False,))
    result = c.fetchall()
    return result


async def open_random_card(user_id, table_chat_id):
    closed_cards = []
    result = tuple()
    for card in user_cards:
        c.execute(f'''SELECT {card}, {card}_on FROM chat_{table_chat_id} WHERE user_id = ?''', (user_id,))
        result = c.fetchall()[0]

        if int(result[1]) == 0:
            closed_cards.append(card)

    if not closed_cards:
        return

    card_to_open = random.choice(closed_cards)

    c.execute(f'''UPDATE chat_{table_chat_id} SET {card_to_open}_on = 1, can_open = 0
                  WHERE user_id = ?''', (user_id,))
    conn.commit()

    card_value = result[0]  # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Å–∫—Ä—ã–≤–∞–µ–º–æ–π –∫–∞—Ä—Ç—ã
    card_name = card_name_translation.get(card_to_open, card_to_open)
    text = await load_config()
    answer_text = f"{str(text['you_didnt_choose_card']['text']).format(card_name=card_name, card_value=card_value)}"
    try:
        await bot.send_message(user_id, answer_text)
    except Exception:
        pass


async def is_game_active(table_chat_id):
    c.execute(f'''SELECT is_in_game FROM chats WHERE chat_id = {table_chat_id}''')
    result = c.fetchone()[0]
    return result == IsInGameNow.IN_GAME


async def is_banned(user_id):
    c.execute(f'''SELECT is_banned FROM users WHERE user_id = ?''', (user_id,))
    result = c.fetchone()

    if result is None:
        return False

    is_banned_value = result[0]

    return bool(is_banned_value)


async def which_chat_with_logs():
    c.execute(f'''SELECT log_chat_id FROM admin_info''')
    result = int(c.fetchone()[0])
    return result


@bot.message_handler(commands=['start'])
async def start(me):
    user_id = int(me.from_user.id)

    if await is_banned(user_id) is True:
        return

    command = me.text.split(' ')
    markup = types.InlineKeyboardMarkup()
    c.execute(
        '''INSERT OR IGNORE INTO users (user_id, games_played, win_games, points, is_in_game) VALUES (?, ?, ?, ?, ?)''',
        (user_id, 0, 0, 0, 0))
    conn.commit()

    if len(command) == 1:
        config = await load_config()
        if me.chat.type == 'private':
            message = (
                "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–£–ù–ö–ï–†.</b>\n\n"
                "–ú–∏—Ä —Å–Ω–∞—Ä—É–∂–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω, –∏ —Ç—ã –æ–∫–∞–∑–∞–ª—Å—è –≤ –æ–¥–Ω–æ–º –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–±–µ–∂–∏—â —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞. –ó–¥–µ—Å—å –Ω–µ—Ç –º–µ—Å—Ç–∞ —Å–ª–∞–±–∞–∫–∞–º. –ö–∞–∂–¥–∞—è –∏–≥—Ä–∞ ‚Äî —ç—Ç–æ –Ω–æ–≤–∞—è –±–∏—Ç–≤–∞ –∑–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ, –∏ –Ω–∏–∫—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –∏–∑ –Ω–∞—Å –¥–æ–∂–∏–≤—ë—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞.\n\n"
                "–¢—ã –¥–æ–ª–∂–µ–Ω –±–æ—Ä–æ—Ç—å—Å—è –∑–∞ —Å–≤–æ—ë –º–µ—Å—Ç–æ –≤ –±—É–Ω–∫–µ—Ä–µ, –∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –º–Ω–æ–≥–æ. –¢–µ–±–µ –ø—Ä–∏–¥—ë—Ç—Å—è –¥–µ–ª–∞—Ç—å —Ç—Ä—É–¥–Ω—ã–µ –≤—ã–±–æ—Ä—ã, –∏ –∫–∞–∂–¥—ã–π —Ç–≤–æ–π —à–∞–≥ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –≥–∏–±–µ–ª–∏.\n\n"
                "<b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>\n"
                "–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ —Å–≤–æ–π –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /new_game, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –±–æ—Ä—å–±—É –∑–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ. –ü–æ–º–æ—â—å –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ /help.\n"
                "–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏")
            markup.add(types.InlineKeyboardButton(text=config['add_bot_to_chat']['text'],
                                                  url=config['add_bot_to_chat']['url']),
                       types.InlineKeyboardButton(text=config['tg_channel']['text'],
                                                  url=config['tg_channel']['url'])
                       )
            markup.add(types.InlineKeyboardButton(text=config['rules']['text'],
                                                  url=config['rules']['url']))
            await bot.send_message(user_id, message, reply_markup=markup, parse_mode='HTML')
        elif me.chat.type in ['group', 'supergroup']:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —á–∞—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –≤ –±–¥
            chat_name = me.chat.title
            chat_id = me.chat.id

            c.execute('''UPDATE chats SET chat_name = ? WHERE chat_id = ?''', (chat_name, -1 * chat_id))
            conn.commit()

    elif len(command) == 2 and me.chat.type == 'private':
        chat_id = -1 * int(command[1])
        c.execute('''SELECT game_stop FROM admin_info''')
        game_stop_status = bool(c.fetchone()[0])

        if game_stop_status:
            await bot.send_message(user_id, "–°–æ–∑–¥–∞–Ω–∏–µ –∏ —É—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–∞—Ö –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
            return
        c.execute(f'''SELECT is_in_game FROM chats WHERE chat_id = {chat_id}''')
        chat_status = c.fetchone()[0]

        if chat_status != IsInGameNow.ACTIVE:
            await bot.send_message(user_id, "–≠—Ç–æ—Ç —á–∞—Ç —Å–µ–π—á–∞—Å –Ω–µ –Ω–∞–±–∏—Ä–∞–µ—Ç –∏–≥—Ä–æ–∫–æ–≤.")
            return
        c.execute(F'''SELECT is_in_game FROM users WHERE user_id = {user_id}''')
        result = c.fetchone()[0]
        config = await load_config()
        if result != 0:
            await bot.send_message(user_id, config['already_in_game']['text'])
            return
        elif result == 0:
            c.execute(f'''UPDATE users SET is_in_game = {chat_id} WHERE user_id = {user_id}''')

        c.execute('''SELECT chat_name FROM chats WHERE chat_id = ?''', (chat_id,))
        chat_name = c.fetchone()[0]
        chat_name_for_insert = f'chat_{chat_id}'
        c.execute(F'''INSERT OR IGNORE INTO {chat_name_for_insert} (user_id, user_title) VALUES (?, ?)''',
                  (user_id, me.from_user.first_name))
        conn.commit()
        text = str(config['added_to_game']['text'])
        await bot.send_message(user_id, f'{text.format(chat_name=chat_name)}')


@bot.callback_query_handler(func=lambda call: call.data.startswith('open_'))
async def handle_card_open(call):
    data_parts = call.data.split('_')
    if len(data_parts) != 4:
        await bot.answer_callback_query(call.id, '–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.', show_alert=True)
        return

    _, card_type, table_chat_id, _ = data_parts
    user_id = call.from_user.id
    config = await load_config()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
    table_name = f'chat_{str(table_chat_id)}'
    c.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name='{table_name}';")
    if not c.fetchone():
        await bot.answer_callback_query(call.id, "–≠—Ç–æ—Ç –≤—ã–±–æ—Ä –∫–∞—Ä—Ç —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return

    try:
        c.execute(f'''SELECT can_open FROM {table_name} WHERE user_id = ?''', (user_id,))
    except Exception:
        await bot.answer_callback_query(call.id, "–≠—Ç–æ—Ç –≤—ã–±–æ—Ä –∫–∞—Ä—Ç —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return

    can_open_result = c.fetchone()
    if can_open_result is None or can_open_result[0] == 0:
        await bot.answer_callback_query(call.id, config['already_opened_card']['text'], show_alert=True)
        return

    await set_can_open(table_chat_id, False, user_id)
    c.execute(f'''SELECT {card_type}, {card_type}_on FROM {table_name} WHERE user_id = ?''', (user_id,))
    result = c.fetchone()

    if result is None or result[1] == 1:
        await bot.answer_callback_query(call.id, config['open_card_error']['text'], show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç—ã –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã–π
    c.execute(f'''UPDATE {table_name} SET {card_type}_on = 1 WHERE user_id = ?''', (user_id,))
    conn.commit()

    card_name = card_name_translation.get(card_type, card_type)
    await bot.answer_callback_query(call.id, config['card_opened']['text'].format(card_name=card_name), show_alert=True)

    opened_cards, closed_cards = await check_cards(user_id, table_chat_id)

    # –¢–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    opened_text = "–û—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã:\n" + "\n".join(
        [f"- {card_name_translation.get(card[0], card[0])}: {card[1][0]}" for card in opened_cards]
    )
    closed_text = "–ó–∞–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã:\n" + "\n".join(
        [f"- {card_name_translation.get(card[0], card[0])}: –°–∫—Ä—ã—Ç–æ" for card in closed_cards]
    )
    message_text = f"{config['card_opened']['text'].format(card_name=card_name)}\n\n{opened_text}\n\n{closed_text}"

    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=message_text, parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: call.data.startswith('voting_'))
async def call_voting(call):
    _, table_chat_id, voted_for_user_id, unique_number = call.data.split('_')
    user_id = call.from_user.id
    voted_for_user_id = int(voted_for_user_id)
    table_chat_id = int(table_chat_id)
    unique_number = int(unique_number)
    sqlite_table_name = f'voting_in_chat_{table_chat_id}_{unique_number}'

    config = await load_config()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
    c.execute(f'''SELECT name FROM sqlite_master WHERE type="table" AND name="{sqlite_table_name}"''')
    result = c.fetchone()

    if result is None:
        await bot.answer_callback_query(call.id, config['voting_unavailable']['text'], show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
    c.execute(f'''SELECT voter_id FROM {sqlite_table_name} WHERE voter_id = ?''', (user_id,))
    if c.fetchone() is not None:
        await bot.answer_callback_query(call.id, config['already_voted']['text'], show_alert=True)
        return

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å
    c.execute(f'''INSERT INTO {sqlite_table_name} (voter_id, "{voted_for_user_id}") VALUES (?, ?)''', (user_id, 1))
    conn.commit()

    vote_text = config["vote_registered"]["text"]

    await bot.answer_callback_query(call.id, vote_text, show_alert=True)


@bot.callback_query_handler(func=lambda call: call.data in ["events"])
async def handle_shop_category(call):
    if call.data == "events":
        await show_events(call)
    await bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data == 'start_game_now')
async def start_game_now_callback(call):
    chat_id = call.message.chat.id
    chat_id = str(chat_id).replace('-', '')
    table_chat_id = int(chat_id)
    safe_table_chat_id = f'chat_{table_chat_id}'
    c.execute('''SELECT game_stop FROM admin_info''')
    game_stop_status = c.fetchone()[0]

    if game_stop_status:
        await bot.answer_callback_query(call.id, "–ü–æ —Ä–µ—à–µ–Ω–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞(–æ–≤) –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∏–≥—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.",
                                        show_alert=True)
        return
    c.execute(f'''SELECT COUNT(*) FROM {safe_table_chat_id}''')
    player_count = int(c.fetchone()[0])

    c.execute(f'''SELECT is_in_game FROM chats WHERE chat_id = {table_chat_id}''')
    chat_info = c.fetchone()[0]
    if chat_info != IsInGameNow.ACTIVE:
        await bot.answer_callback_query(call.id, "–≠—Ç—É –∏–≥—Ä—É –Ω–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å.", show_alert=True)
        return

    if 4 <= player_count <= 16:
        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –Ω–∞ "–≤ –∏–≥—Ä–µ"
        c.execute('''UPDATE chats SET is_in_game = ? WHERE chat_id = ?''', (IsInGameNow.IN_GAME, table_chat_id))
        conn.commit()

        who_started = create_user_link(call.from_user.id, call.from_user.first_name)
        chat_id = call.message.chat.id

        await bot.send_message(chat_id, f"–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–æ—Å—Ä–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {who_started}! üéâ", parse_mode='HTML')
        c.execute(f'''SELECT catastrophe FROM chats WHERE chat_id = ?''', (table_chat_id,))
        catastrophe = c.fetchone()[0]
        current_dir = os.path.dirname(os.path.abspath(__file__))
        file_path = os.path.join(current_dir, 'catastrophe_photos',
                                 f"{dictionaries.catastrophe[catastrophe]['image']}.jpg")
        with open(file_path, 'rb') as file:
            image_data = file.read()
        try:
            await bot.send_photo(chat_id, photo=image_data,
                                 caption=f"‚ò†Ô∏è –ù–∞–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω. –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∏–∑ {player_count} —á–µ–ª–æ–≤–µ–∫ –æ—Å—Ç–∞–Ω—É—Ç—Å—è —É–º–∏—Ä–∞—Ç—å –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –±—É–Ω–∫–µ—Ä–∞\n"
                                         f"üå™Ô∏è –£–∂–∞—Å–Ω—ã–π –∫–∞—Ç–∞–∫–ª–∏–∑–º –Ω–∞—Å—Ç–∏–≥ –ø–ª–∞–Ω–µ—Ç—É ‚Äì {dictionaries.catastrophe[catastrophe]['name'].lower()}\n"
                                         f"{dictionaries.catastrophe[catastrophe]['description']}\n"
                                         f"–£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã")
        except Exception as e:
            await break_game(chat_id)
            return

        await bot.answer_callback_query(call.id)
        if player_count in [3, 4]:
            await rounds(0, 0, 1, 1, chat_id)
        elif player_count in [5, 6]:
            await rounds(0, 1, 1, 1, chat_id)
        elif player_count in [7, 8]:
            await rounds(1, 1, 1, 1, chat_id)
        elif player_count in [9, 10]:
            await rounds(1, 1, 1, 2, chat_id)
        elif player_count in [11, 12]:
            await rounds(1, 1, 2, 2, chat_id)
        elif player_count in [13, 14]:
            await rounds(1, 2, 2, 2, chat_id)
        elif player_count in [15, 16]:
            await rounds(2, 2, 2, 2, chat_id)
    else:
        await bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (–º–∏–Ω–∏–º—É–º 4).",
                                        show_alert=True)


@bot.callback_query_handler(func=lambda call: call.data.startswith("end_discussion_"))
async def end_discussion_callback(call):
    data_parts = call.data.split("_")
    if len(data_parts) != 4:
        await bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    user_name = call.from_user.first_name
    _, _, user_id, table_chat_id = data_parts
    user_id = int(user_id)
    table_chat_id = int(table_chat_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π –∏–≥—Ä–æ–∫ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
    if call.from_user.id != user_id:
        await bot.answer_callback_query(call.id, "–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å!", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
    c.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name='chat_{table_chat_id}'")
    if c.fetchone() is None:
        await bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏–ª–∏ –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                                        show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞
    c.execute(f'''UPDATE chat_{table_chat_id} SET is_in_discussion = ? WHERE user_id = ?''',
              (Discussion.stop, user_id))
    conn.commit()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏ –≥—Ä—É–ø–ø—É
    message = f'–ò–≥—Ä–æ–∫ {user_name}, –µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã:\n'
    opened_cards, _ = await check_cards(user_id, table_chat_id)
    for card, result in opened_cards:
        card_name = card_name_translation.get(card, card).capitalize()  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
        message += f'‚Ä¢ {card_name}: {result[0]}\n'  # 0 - –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
    message += "–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ. –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞."
    await bot.answer_callback_query(call.id, "–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ.")

    try:
        await bot.edit_message_text(chat_id=call.message.chat.id,
                                    message_id=call.message.message_id,
                                    text=message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def show_events(call):
    user_id = call.id
    await bot.answer_callback_query(user_id, "–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞ —á—Ç–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –Ω–∞—à–µ–º —Ç–≥–∫",
                                    show_alert=True)


@bot.callback_query_handler(func=lambda call: call.data.startswith("time_for_cards"))
async def change_cards(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id

    admins = await bot.get_chat_administrators(chat_id)
    is_admin = any(admin.user.id == user_id for admin in admins)

    if not is_admin:
        await bot.answer_callback_query(call.id, "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–∞—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)
        return

    table_chat_id = -1 * chat_id
    _, _, _, time_for_discuss = call.data.split("_")
    time_for_discuss = int(time_for_discuss)
    message = "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∫–∞—Ä—Ç\n"
    if time_for_discuss == 0:
        c.execute(f"""SELECT discussion_time FROM chats WHERE chat_id = ?""", (table_chat_id,))
        time_for_discuss = c.fetchone()[0]
        time_for_discuss = int(time_for_discuss)
    else:
        c.execute(f"""UPDATE chats SET discussion_time = ? WHERE chat_id = ?""", (time_for_discuss, table_chat_id))
        conn.commit()
    message += f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {time_for_discuss} —Å–µ–∫—É–Ω–¥\n"
    message += f"–ü–æ–º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É\n\n"
    markup = types.InlineKeyboardMarkup()
    if time_for_discuss < 75:
        markup.add(types.InlineKeyboardButton(text=f"{time_for_discuss + 15}", callback_data=f"time_for_cards_{time_for_discuss + 15}"))
    elif time_for_discuss > 285:
        markup.add(types.InlineKeyboardButton(text=f"{time_for_discuss - 15}", callback_data=f"time_for_cards_{time_for_discuss - 15}"))
    else:
        markup.add(types.InlineKeyboardButton(text=f"{time_for_discuss - 15}", callback_data=f"time_for_cards_{time_for_discuss - 15}"),
                   types.InlineKeyboardButton(text=f"{time_for_discuss + 15}", callback_data=f"time_for_cards_{time_for_discuss + 15}"))
    markup.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings"))
    await bot.edit_message_text(message, chat_id, call.message.id, parse_mode='HTML', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("time_for_open_cards"))
async def change_cards(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id

    admins = await bot.get_chat_administrators(chat_id)
    is_admin = any(admin.user.id == user_id for admin in admins)

    if not is_admin:
        await bot.answer_callback_query(call.id, "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–∞—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)
        return

    table_chat_id = -1 * chat_id
    _, _, _, _, time_for_open = call.data.split("_")
    time_for_open = int(time_for_open)
    message = "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç\n"
    if time_for_open == 0:
        c.execute(f"""SELECT open_time FROM chats WHERE chat_id = ?""", (table_chat_id,))
        time_for_open = c.fetchone()[0]
        time_for_open = int(time_for_open)
    else:
        c.execute(f"""UPDATE chats SET open_time = ? WHERE chat_id = ?""", (time_for_open, table_chat_id))
        conn.commit()
    message += f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {time_for_open} —Å–µ–∫—É–Ω–¥\n\n"
    message += f"–ü–æ–º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É\n"
    markup = types.InlineKeyboardMarkup()
    if time_for_open < 45:
        markup.add(types.InlineKeyboardButton(text=f"{time_for_open + 15}", callback_data=f"time_for_open_cards_{time_for_open + 15}"))
    elif time_for_open > 105:
        markup.add(types.InlineKeyboardButton(text=f"{time_for_open - 15}", callback_data=f"time_for_open_cards_{time_for_open - 15}"))
    else:
        markup.add(types.InlineKeyboardButton(text=f"{time_for_open - 15}", callback_data=f"time_for_open_cards_{time_for_open - 15}"),
                   types.InlineKeyboardButton(text=f"{time_for_open + 15}", callback_data=f"time_for_open_cards_{time_for_open + 15}"))
    markup.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings"))
    await bot.edit_message_text(message, chat_id, call.message.id, parse_mode='HTML', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("time_for_voting"))
async def change_voting_time(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id

    admins = await bot.get_chat_administrators(chat_id)
    is_admin = any(admin.user.id == user_id for admin in admins)

    if not is_admin:
        await bot.answer_callback_query(call.id, "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–∞—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", show_alert=True)
        return

    table_chat_id = -1 * chat_id
    _, _, _, time_for_voting = call.data.split("_")
    time_for_voting = int(time_for_voting)

    message = "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è\n"
    if time_for_voting == 0:
        c.execute(f"""SELECT voting_time FROM chats WHERE chat_id = ?""", (table_chat_id,))
        time_for_voting = int(c.fetchone()[0])
    else:
        c.execute(f"""UPDATE chats SET voting_time = ? WHERE chat_id = ?""", (time_for_voting, table_chat_id))
        conn.commit()

    message += f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {time_for_voting} —Å–µ–∫—É–Ω–¥\n\n"
    message += f"–ü–æ–º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É\n"

    markup = types.InlineKeyboardMarkup()
    if time_for_voting < 45:
        markup.add(types.InlineKeyboardButton(text=f"{time_for_voting + 15}",
                                              callback_data=f"time_for_voting_{time_for_voting + 15}"))
    elif time_for_voting > 165:
        markup.add(types.InlineKeyboardButton(text=f"{time_for_voting - 15}",
                                              callback_data=f"time_for_voting_{time_for_voting - 15}"))
    else:
        markup.add(types.InlineKeyboardButton(text=f"{time_for_voting - 15}",
                                              callback_data=f"time_for_voting_{time_for_voting - 15}"),
                   types.InlineKeyboardButton(text=f"{time_for_voting + 15}",
                                              callback_data=f"time_for_voting_{time_for_voting + 15}"))
    markup.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings"))


    await bot.edit_message_text(message, chat_id, call.message.id, parse_mode='HTML', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "reset_settings")
async def reset_settings(call):
    user_id = call.from_user.id
    user_name = call.from_user.first_name
    chat_id = call.message.chat.id
    table_chat_id = -1 * chat_id
    admins = await bot.get_chat_administrators(chat_id)
    is_admin = any(admin.user.id == user_id for admin in admins)

    if not is_admin:
        await bot.answer_callback_query(call.id, "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–∞—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", show_alert=True)
        return

    discussion_time = 60
    open_time = 60
    voting_time = 60
    message = (f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {create_user_link(user_id, user_name)}. –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
               f"–í—Ä–µ–º—è –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º–∏ —Å–≤–æ–∏—Ö –∫–∞—Ä—Ç: {discussion_time}\n"
               f"–í—Ä–µ–º—è –Ω–∞ –≤—Å–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç: {open_time}\n"
               f"–í—Ä–µ–º—è –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: {voting_time}\n"
               f"–°–µ–π—á–∞—Å –±–æ—Ç —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤")
    try:
        c.execute(f"""UPDATE chats SET discussion_time = ?, open_time = ?, voting_time = ?, delete_message = ? WHERE chat_id = ?""",
                  (discussion_time, open_time, voting_time, True, table_chat_id))
        conn.commit()
    except Exception:
        await bot.send_message(chat_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É...")
        return
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings"))
    await bot.edit_message_text(message, chat_id, call.message.id, parse_mode='HTML', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_message_"))
async def needed_to_delete_message(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id

    admins = await bot.get_chat_administrators(chat_id)
    is_admin = any(admin.user.id == user_id for admin in admins)

    if not is_admin:
        await bot.answer_callback_query(call.id, "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–∞—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", show_alert=True)
        return

    table_chat_id = -1 * chat_id
    _, _, delete_message = call.data.split("_")
    delete_message = bool(int(delete_message))

    c.execute(f"""SELECT delete_message FROM chats WHERE chat_id = ?""", (table_chat_id,))
    result = bool(int(c.fetchone()[0]))

    if delete_message:

        for_update = not result
        c.execute(f"""UPDATE chats SET delete_message = ?""", (for_update,))
        conn.commit()
        if not for_update:
            message = "–¢–µ–ø–µ—Ä—å –±–æ—Ç –Ω–µ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≤—ã–±—ã–≤—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤"
        else:
            message = "–¢–µ–ø–µ—Ä—å –±–æ—Ç —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≤—ã–±—ã–≤—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤"
    else:
        if result:
            message = "–°–µ–π—á–∞—Å –±–æ—Ç —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤."
        else:
            message = "–°–µ–π—á–∞—Å –±–æ—Ç –Ω–µ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤"
    message += "\n\n–°–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="–°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è", callback_data="delete_message_1"))
    markup.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings"))
    await bot.edit_message_text(message, chat_id, call.message.id, parse_mode='HTML', reply_markup=markup)




@bot.message_handler(commands=['new_game'])
async def start_new_game(me):
    if me.chat.type == 'private':
        return
    user_id = me.from_user.id
    if await is_banned(user_id) is True:
        return
    try:
        _, count_players = str(me.text).split(' ')
        count_players = int(count_players)
    except Exception:
        count_players = 8
    if count_players < 4 or count_players > 16:
        await bot.send_message(me.chat.id, f'üö´ –ò–≥—Ä–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–≥—Ä–æ–∫–æ–≤ {count_players} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.')
        return
    chat_id = me.chat.id
    safe_chat_id = str(chat_id * -1)
    c.execute('''SELECT is_in_game FROM chats WHERE chat_id = ?''', (safe_chat_id,))
    try:
        result = c.fetchone()[0]
    except Exception:
        result = IsInGameNow.INACTIVE
    if result == IsInGameNow.IN_GAME:
        await bot.send_message(chat_id,
                               '‚ö†Ô∏è –ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –µ—ë –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ, '
                               '–∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /stop_game.')
        return
    elif result == IsInGameNow.ACTIVE:
        await bot.send_message(chat_id, '‚è≥ –í—ã —É–∂–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –Ω–∞–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤. –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –¥—Ä—É–≥–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—Å—è, '
                                        '–ª–∏–±–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /stop_game')
        return
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ –∏–≥—Ä—ã
        c.execute('''SELECT game_stop FROM admin_info''')
        game_stop_status = c.fetchone()[0]

        if game_stop_status:
            await bot.send_message(me.chat.id, "–ü–æ —Ä–µ—à–µ–Ω–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞(–æ–≤) –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∏–≥—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
            return
        bot_id = (await bot.get_me()).id
        chat_member = await bot.get_chat_member(chat_id, bot_id)
        if not chat_member.can_delete_messages or not chat_member.can_restrict_members:
            await bot.send_message(chat_id,
                                   '‚ùóÔ∏è –£ –º–µ–Ω—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–≥—Ä—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–∞–≤–∞ '
                                   '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –≤–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.')
            return
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
        c.execute('''UPDATE chats SET is_in_game = ? WHERE chat_id = ?''',
                  (IsInGameNow.ACTIVE, safe_chat_id))
        conn.commit()

    catastrophe = random.randint(1, len(dictionaries.catastrophe))
    safe_chat_id = f'chat_{safe_chat_id}'
    c.execute(f'''DROP TABLE IF EXISTS {safe_chat_id}''')
    c.execute(f'''CREATE TABLE IF NOT EXISTS {safe_chat_id} (
        user_id INTEGER PRIMARY KEY,
        user_title TEXT NOT NULL,
        baggage INTEGER DEFAULT 0,
        baggage_on BOOLEAN DEFAULT False,
        health INTEGER DEFAULT 0,
        health_on BOOLEAN DEFAULT False,
        profession INTEGER DEFAULT 0,
        profession_on BOOLEAN DEFAULT True,
        facts INTEGER DEFAULT 0,
        facts_on BOOLEAN DEFAULT False,
        hobby INTEGER DEFAULT 0,
        hobby_on BOOLEAN DEFAULT False,
        biology INTEGER DEFAULT 0,
        biology_on BOOLEAN DEFAULT False,
        skills INTEGER DEFAULT 0,
        skills_on BOOLEAN DEFAULT False,
        is_alive BOOLEAN DEFAULT True,
        can_open BOOLEAN DEFAULT False,
        is_in_discussion TEXT DEFAULT "{Discussion.not_in_discussion}"
    )''')
    conn.commit()
    safe_chat_id = chat_id * -1
    c.execute(F'''UPDATE chats SET catastrophe = ? WHERE chat_id = ?''', (catastrophe, safe_chat_id))
    conn.commit()
    markup_start_game = types.InlineKeyboardMarkup()
    markup_start_game.add(types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –¥–æ—Å—Ä–æ—á–Ω–æ', callback_data='start_game_now'))
    link = create_referral_chat_link(chat_id)
    markup_start_game.add(types.InlineKeyboardButton(text='–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ', url=link))

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    catastrophe_name = dictionaries.catastrophe[catastrophe]['name']
    start_message = (
            "üöÄ –ò–¥—ë—Ç –Ω–∞–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤\n\n"
            "üå™ –ù–∞–¥ –º–∏—Ä–æ–º –Ω–∞–≤–∏—Å–ª–∞ —É–∂–∞—Å–∞—é—â–∞—è –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞  ‚Äì " + catastrophe_name.lower() + "\n"
                                                                                        "üé≠ –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: " + str(count_players) + "\n\n"
    )

    last_send_message = await bot.send_message(chat_id=chat_id, text=start_message, reply_markup=markup_start_game)

    await game(me, last_send_message.id, last_send_message, count_players, markup_start_game)


async def game(me, last_message_sended, last_message, count_players, markup):
    chat_id = me.chat.id
    table_chat_id = int(chat_id) * -1

    last_message_text = last_message.text

    c.execute(f'''SELECT COUNT(*) FROM chat_{table_chat_id}''')
    result = int(c.fetchone()[0])

    remaining_time = 300

    last_message_text = f"{last_message_text}\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–∏–µ—Å—è: \n"
    new_text = last_message_text
    all_players = []
    try:
        c.execute(f'''SELECT user_id, user_title FROM chat_{table_chat_id}''')
        all_players = c.fetchall()
    except Exception:
        pass
    for player in all_players:
        user_id, user_name = player
        new_text = new_text + create_user_link(user_id, user_name) + '\n'

    c.execute(f'''SELECT is_in_game FROM chats WHERE chat_id = {table_chat_id}''')
    chat_info = c.fetchone()[0]

    while result < count_players and remaining_time > 0 and chat_info == IsInGameNow.ACTIVE:
        try:
            await bot.edit_message_text(new_text, chat_id, last_message_sended, parse_mode='HTML', reply_markup=markup)
        except Exception:
            pass

        c.execute(f'''SELECT is_in_game FROM chats WHERE chat_id = {table_chat_id}''')
        zzz = c.fetchone()
        if zzz is not None:
            chat_info = zzz[0]

        await asyncio.sleep(3)
        remaining_time -= 3

        c.execute(f'''SELECT COUNT(*) FROM chat_{table_chat_id}''')
        result = int(c.fetchone()[0])
        try:
            c.execute(f'''SELECT user_id, user_title FROM chat_{table_chat_id}''')
            all_players = c.fetchall()
            new_text = last_message_text
            for player in all_players:
                user_id, user_name = player
                new_text = new_text + create_user_link(user_id, user_name) + '\n'
        except Exception:
            pass

    if remaining_time <= 0:
        await break_game(chat_id)
        await bot.edit_message_text('–ò–≥—Ä–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è.', chat_id,
                                    last_message_sended)
        return

    c.execute(f'''SELECT is_in_game FROM chats WHERE chat_id = ?''', (table_chat_id,))
    chat_info = str(c.fetchone()[0])

    if chat_info == IsInGameNow.INACTIVE:
        await bot.edit_message_text('–ò–≥—Ä–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', chat_id, last_message_sended)
        return
    elif chat_info == IsInGameNow.IN_GAME:
        return
    elif chat_info == IsInGameNow.ACTIVE:
        chat_info = IsInGameNow.IN_GAME
        c.execute('''UPDATE chats SET is_in_game = ? WHERE chat_id = ?''', (chat_info, table_chat_id))

        c.execute(f'''SELECT catastrophe FROM chats WHERE chat_id = ?''', (table_chat_id,))
        catastrophe = c.fetchone()[0]
        current_dir = os.getcwd()
        file_path = os.path.join(
            current_dir,
            'catastrophe_photos',
            f"{dictionaries.catastrophe[catastrophe]['image']}.jpg"
        )
        with open(file_path, 'rb') as file:  # –û—Ç–∫—Ä—ã—Ç–∏–µ –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            image_data = file.read()
        try:
            await bot.send_photo(chat_id, photo=image_data,
                                 caption=f"‚ò†Ô∏è –ù–∞–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω. –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∏–∑ {count_players} —á–µ–ª–æ–≤–µ–∫ –æ—Å—Ç–∞–Ω—É—Ç—Å—è —É–º–∏—Ä–∞—Ç—å –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –±—É–Ω–∫–µ—Ä–∞\n"
                                         f"üå™Ô∏è –£–∂–∞—Å–Ω—ã–π –∫–∞—Ç–∞–∫–ª–∏–∑–º –Ω–∞—Å—Ç–∏–≥ –ø–ª–∞–Ω–µ—Ç—É ‚Äì {dictionaries.catastrophe[catastrophe]['name'].lower()}\n"
                                         f"{dictionaries.catastrophe[catastrophe]['description']}\n"
                                         f"–ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –±–æ—Ä—å–±–µ –∑–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ! üí™")
        except Exception:
            await break_game(chat_id)
            return

    c.execute(f'''SELECT user_id, user_title FROM chat_{table_chat_id}''')
    all_players = c.fetchall()
    new_text = last_message_text
    for player in all_players:
        user_id, user_name = player
        new_text = new_text + create_user_link(user_id, user_name) + '\n'
        try:
            await bot.edit_message_text(new_text, chat_id, last_message_sended, parse_mode='HTML', reply_markup=markup)
        except Exception:
            pass
    if result < 4:
        c.execute(f'''DROP TABLE IF EXISTS chat_{table_chat_id}''')
        return
    if result in [4]:
        await rounds(0, 0, 1, 1, chat_id)
    elif result in [5, 6]:
        await rounds(0, 1, 1, 1, chat_id)
    elif result in [7, 8]:
        await rounds(1, 1, 1, 1, chat_id)
    elif result in [9, 10]:
        await rounds(1, 1, 1, 2, chat_id)
    elif result in [11, 12]:
        await rounds(1, 1, 2, 2, chat_id)
    elif result in [13, 14]:
        await rounds(1, 2, 2, 2, chat_id)
    elif result in [15, 16]:
        await rounds(2, 2, 2, 2, chat_id)


async def rounds(round_1, round_2, round_3, round_4, chat_id: int):
    x = await which_chat_with_logs()
    await bot.send_message(x, f'üèÅ –í —á–∞—Ç–µ {chat_id} –Ω–∞—á–∞–ª–∞—Å—å –Ω–æ–≤–∞—è –∏–≥—Ä–∞!')
    table_chat_id = -1 * chat_id
    c.execute(f'''SELECT user_id FROM chat_{table_chat_id}''')
    list_of_ids = c.fetchall()

    for user_id_tuple in list_of_ids:
        user_id = int(user_id_tuple[0])
        await cards(user_id, chat_id)
        c.execute('''UPDATE users SET games_played = games_played + 1 WHERE user_id = ?''', (user_id,))
        conn.commit()


    rounds_data = [round_1, round_2, round_3, round_4]
    for round_count in rounds_data:
        if round_count > 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ä–∞—É–Ω–¥
            if await is_game_active(table_chat_id) is False:
                return
            lives = await is_alive(table_chat_id)

            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É', url='https://t.me/bunkerbe_bot'))
            players_alive = ""
            i = 1
            for user in lives:
                user_id = user[0]
                user_name = user[1]
                players_alive += f"{str(i)}. {create_user_link(user_id, user_name)}\n"
                i += 1
            try:
                await bot.send_message(chat_id, f"–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –≤—Å–∫—Ä—ã—Ç—å —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã. –í –±—É–Ω–∫–µ—Ä–µ –æ—Å—Ç–∞–ª–∏—Å—å:\n"
                                                f"{players_alive}"
                                                f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–ø–∞—Å—Ç—å –≤–Ω—É—Ç—Ä—å.\n"
                                                f"–ü–æ—Ç–æ–º –≤–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –¥–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–º —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã –¥–æ—Å—Ç–æ–π–Ω—ã –º–µ—Å—Ç–∞ –≤ –±—É–Ω–∫–µ—Ä–µ.",
                                       reply_markup=markup, parse_mode='HTML')
            except Exception:
                await break_game(chat_id)
                return
            await set_can_open(table_chat_id, True, None)
            for user in lives:
                user_id = user[0]
                user_name = user[1]
                await open_some_card(table_chat_id, True, user_id, user_name)

            c.execute(f'''SELECT open_time FROM chats WHERE chat_id = ?''', (table_chat_id, ))
            open_time = int(c.fetchone()[0])

            await asyncio.sleep(open_time)

            if await is_game_active(table_chat_id) is False:
                return

            for user in lives:
                user_id = user[0]
                c.execute(f'''SELECT can_open FROM chat_{table_chat_id} WHERE user_id = {user_id}''')
                result = bool(c.fetchone()[0])
                if result is True:
                    await open_random_card(user_id, table_chat_id)

            await about_players(chat_id)

            for _ in range(round_count):
                if await is_game_active(table_chat_id) is False:
                    return
                await voting(chat_id, table_chat_id)
    lives = await is_alive(table_chat_id)
    user_ids_to_reset = [user[0] for user in lives] + [user[0] for user in await is_dead(table_chat_id)]
    await reset_player_status(user_ids_to_reset)
    message_text = (
        f"‚ö∞Ô∏è <b>–¢–µ, –∫—Ç–æ –ø—Ä–æ—à—ë–ª –≤ –±—É–Ω–∫–µ—Ä:</b>\n\n"
    )

    for user_id, user_name in lives:
        user_id = int(user_id)
        c.execute('''UPDATE users SET win_games = win_games + 1, points = points + 10 WHERE user_id = ?''', (user_id,))
        conn.commit()
        new_user = create_user_link(user_id, user_name)
        message_text += f"‚Ä¢ {new_user}\n"
    c.execute(f'''DROP TABLE chat_{table_chat_id}''')
    conn.commit()
    c.execute(f'''UPDATE chats SET is_in_game = "{IsInGameNow.INACTIVE}" WHERE chat_id = {table_chat_id}''')
    conn.commit()
    message_text += (
        f"‚ö°Ô∏è <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤—ã–∂–∏–≤—à–∏—Ö.</b> –ù–æ –ø–æ–º–Ω–∏—Ç–µ: –≤—ã–∂–∏—Ç—å ‚Äî —ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ. –¢–µ–ø–µ—Ä—å –≤–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —Å—Ç–æ–ª–∫–Ω—É—Ç—å—Å—è —Å –∫–æ—à–º–∞—Ä–∞–º–∏ –Ω–æ–≤–æ–≥–æ –º–∏—Ä–∞. –í—ã –ø–æ–∂–∞–ª–µ–µ—Ç–µ, —á—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å –≤ –∂–∏–≤—ã—Ö.\n\n"
        f"üíÄ <b>–ë—É–Ω–∫–µ—Ä –Ω–µ —Å–ø–∞—Å—ë—Ç –≤–∞—Å –æ—Ç –∞–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –∂–¥—ë—Ç —Å–Ω–∞—Ä—É–∂–∏.</b>"
    )

    try:
        await bot.send_message(chat_id, message_text, parse_mode='HTML')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏


async def voting(chat_id, table_chat_id):
    lives = await is_alive(table_chat_id)
    number_for_unique_dictionary = random.randint(0, 1000000000)
    sqlite_table_name = f'voting_in_chat_{table_chat_id}_{number_for_unique_dictionary}'

    markup = types.InlineKeyboardMarkup()

    c.execute(f'''CREATE TABLE IF NOT EXISTS {sqlite_table_name} (voter_id INTEGER)''')  # –ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è ID –≥–æ–ª–æ—Å—É—é—â–µ–≥–æ
    for user in lives:
        user_id = user[0]
        c.execute(f'ALTER TABLE {sqlite_table_name} ADD COLUMN "{user_id}" INTEGER DEFAULT 0')

    markup.add(types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é', url='https://t.me/bunkerbe_bot'))
    try:
        photo_filename = 'voting.jpg'
        photo_path = os.path.join("gifs", photo_filename)
        photo = open(photo_path, 'rb')

        await bot.send_photo(chat_id, photo=photo,
                                 caption='–í—Ä–µ–º—è –≤—ã—à–ª–æ. –í—ã–±–∏—Ä–∞–π—Ç–µ –∂–µ—Ä—Ç–≤—É –∫–æ—Ç–æ—Ä–∞—è –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –±—É–Ω–∫–µ—Ä–∞',
                                 reply_markup=markup)
    except Exception:
        await break_game(chat_id)
        return
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ
    for user in lives:
        user_id = user[0]
        user_title = user[1]
        markup = types.InlineKeyboardMarkup()
        for voted_user in lives:
            voted_user_id = voted_user[0]
            voted_user_title = voted_user[1]
            markup.add(types.InlineKeyboardButton(f'–ì–æ–ª–æ—Å –∑–∞ {voted_user_title}',
                                                  callback_data=f'voting_{table_chat_id}_'
                                                                f'{voted_user_id}_{number_for_unique_dictionary}'))

        try:
            await bot.send_message(user_id, f'{user_title}, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≥–Ω–∞—Ç—å –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ:',
                                   reply_markup=markup)
        except Exception:
            pass

    c.execute(f"""SELECT voting_time FROM chats WHERE chat_id = ?""", (table_chat_id,))
    voting_time = int(c.fetchone()[0])

    await asyncio.sleep(voting_time)

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞
    voting_results = {}
    for user in lives:
        user_id = user[0]
        c.execute(f'''SELECT COUNT(*) FROM {sqlite_table_name} WHERE "{user_id}" = 1''')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º COUNT
        votes_count = c.fetchone()[0]
        voting_results[user_id] = {"name": user[1], "votes": votes_count}

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–æ–≥–æ –∏—Å–∫–ª—é—á–∏—Ç—å
    max_votes = 0
    players_with_max_votes = []
    all_users = []

    for user_id, data in voting_results.items():
        all_users.append(user_id)
        if data["votes"] > max_votes:
            max_votes = data["votes"]
            players_with_max_votes = [user_id]
        elif data["votes"] == max_votes:
            players_with_max_votes.append(user_id)

    if len(voting_results) == 0:
        kicked_player_id = random.choice(all_users)
    elif len(players_with_max_votes) > 1:
        kicked_player_id = random.choice(players_with_max_votes)
    else:
        kicked_player_id = players_with_max_votes[0]

    # –ö–∏–∫–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –±–¥
    c.execute(f'''UPDATE chat_{table_chat_id} SET is_alive = False WHERE user_id = ?''', (kicked_player_id,))
    conn.commit()

    photo_filename = 'kick.jpg'
    photo_path = os.path.join("gifs", photo_filename)
    photo = open(photo_path, 'rb')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–º—É –∏–≥—Ä–æ–∫—É
    try:
        await bot.send_photo(kicked_player_id, photo=photo, caption="–ò–∑–≤–∏–Ω–∏, –Ω–æ –¥–ª—è —Ç–µ–±—è –º–µ—Å—Ç–∞ –Ω–µ –Ω–∞—à–ª–æ—Å—å, –º–æ–∂–µ—Ç –∫–∞–∫-–Ω–∏–±—É–¥—å –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑...")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    # –°–æ–æ–±—â–∞–µ–º –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    c.execute(f'''SELECT user_title FROM chat_{table_chat_id} WHERE user_id = ?''', (kicked_player_id,))
    result = c.fetchone()

    kicked_player_name = result[0]

    all_cards = await get_all_cards(kicked_player_id, table_chat_id)

    opened_text = ""

    # –¢–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    for card_type, card_value in zip(user_cards, all_cards):
        card_name = card_name_translation.get(card_type, card_type).capitalize()  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
        opened_text += f"- {card_name}: {card_value}\n"


    photo = open(photo_path, 'rb')
    if len(voting_results) == 0:
        try:
            await bot.send_photo(chat_id, photo=photo, caption=f'‚ö†Ô∏è –í—ã —Ç–∞–∫ –∏ –Ω–µ –ø—Ä–∏—à–ª–∏ –∫ —Ä–µ—à–µ–Ω–∏—é, '
                                                               f'—Ç–∞–∫ —á—Ç–æ –º—ã —É–±—å—ë–º: {create_user_link(kicked_player_id, kicked_player_name)}.\n'
                                                               f'–ï–≥–æ –∫–∞—Ä—Ç—ã: \n{opened_text}', parse_mode='HTML')
        except Exception:
            await break_game(chat_id)
            return
    else:
        try:
            await bot.send_photo(chat_id, photo=photo,
                                 caption=f'–ü–æ –∏—Ç–æ–≥–∞–º –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∏–∑ –±—É–Ω–∫–µ—Ä–∞ –±—ã–ª –≤—ã–≥–Ω–∞–Ω {create_user_link(kicked_player_id, kicked_player_name)}.\n'
                                 f'–ï–≥–æ –∫–∞—Ä—Ç—ã: \n{opened_text}', parse_mode='HTML')
        except Exception:
            await break_game(chat_id)
            return

    # –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    c.execute(f'''DROP TABLE {sqlite_table_name}''')
    conn.commit()


async def about_players(chat_id):
    table_chat_id = chat_id * (-1)
    players = await is_alive(table_chat_id)
    for user_id, user_name in players:

        if await is_game_active(table_chat_id) is False:
            return

        opened_cards, closed_cards = await check_cards(user_id, table_chat_id)
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞—Å—Å–∫–∞–∑",
                                              callback_data=f"end_discussion_{user_id}_{table_chat_id}"))
        message = f'–ò–≥—Ä–æ–∫ {user_name}, –µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã:\n'
        for card, result in opened_cards:
            card_name = card_name_translation.get(card, card).capitalize()  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
            message += f'‚Ä¢ {card_name}: {result[0]}\n'  # 0 - —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã

        c.execute(
            f"""UPDATE chat_{table_chat_id} SET is_in_discussion = "{Discussion.in_discussion}" WHERE user_id = {user_id}""")
        conn.commit()
        c.execute(f"""SELECT discussion_time FROM chats WHERE chat_id = {table_chat_id}""")
        timer = int(c.fetchone()[0])
        message += f"–£ –≤–∞—Å –µ—Å—Ç—å {timer} —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –æ—Ç—Å—Ç–æ—è—Ç—å —Å–≤–æ—ë –ø—Ä–∞–≤–æ –Ω–∞ –º–µ—Å—Ç–æ –≤ –±—É–Ω–∫–µ—Ä–µ."
        # –¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –±—É–¥–µ—Ç —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ —Å–µ–±–µ
        try:
            await bot.send_message(chat_id, message, reply_markup=markup)
        except Exception:
            await break_game(chat_id)
            return
        c.execute(f"""SELECT is_in_discussion FROM chat_{table_chat_id} WHERE user_id = {user_id}""")
        status = c.fetchone()[0]
        while timer > 0 and status != Discussion.stop:
            await asyncio.sleep(1)
            timer -= 1
            c.execute(f"""SELECT is_in_discussion FROM chat_{table_chat_id} WHERE user_id = {user_id}""")
            status = str(c.fetchone()[0])
        c.execute(
            f"""UPDATE chat_{table_chat_id} SET is_in_discussion = "{Discussion.not_in_discussion}" WHERE user_id = {user_id}""")
        conn.commit()


async def open_some_card(table_chat_id, is_opened: bool, user_id, user_name):
    # –°–º–æ—Ç—Ä–∏–º –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    opened_cards, closed_cards = await check_cards(user_id, table_chat_id)

    text_opened_cards = ''
    text_closed_cards = ''

    if opened_cards:
        for card, result in opened_cards:
            card_name = card_name_translation.get(card, card).capitalize()  # –ü–æ–ª—É—á–∞–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            text_opened_cards += f"- {card_name}: {result[0]}\n"  # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã

    markup = types.InlineKeyboardMarkup()
    config = await load_config()
    if closed_cards:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã
        for card, result in closed_cards:
            card_name = card_name_translation.get(card, card).capitalize()
            if is_opened:
                reply_markup = config['choose_card_to_open']['reply_markup']
                button = types.InlineKeyboardButton(text=str(reply_markup['text']).format(card_name=card_name),
                                                    callback_data=str(reply_markup['callback_data']).format(
                                                        card_type=card, table_chat_id=table_chat_id, user_id=user_id))
                markup.add(button)
            text_closed_cards += f"- {card_name}: {result[0]}\n"
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            message_text = str(config['choose_card_to_open']['text']).format(user_name=user_name,
                                                                             opened_cards=text_opened_cards,
                                                                             closed_cards=text_closed_cards)
            await bot.send_message(user_id, message_text, reply_markup=markup, parse_mode='HTML')
        except Exception:
            pass
    else:
        try:
            await bot.send_message(user_id, str(config['all_cards_opened']['text']).format(user_name=user_name))
        except Exception:
            pass


@bot.message_handler(commands="leave")
async def leave(me):
    user_id = me.from_user.id
    if await is_banned(user_id) is True:
        return
    c.execute(f'''SELECT is_in_game FROM users WHERE user_id = {user_id}''')
    chat_id = c.fetchone()
    if chat_id is None or int(chat_id[0]) == 0:
        await bot.send_message(me.chat.id, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –∫–∞–∫–æ–π –∏–≥—Ä–µ")
        return
    chat_id = int(chat_id[0])
    c.execute(f'''SELECT is_in_game FROM chats WHERE chat_id = {chat_id}''')
    is_wait_for_new_players = c.fetchone()
    if is_wait_for_new_players is None:
        await bot.send_message(me.chat.id,
                               "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞... –ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –Ω–∞—à —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
        return
    if is_wait_for_new_players[0] != IsInGameNow.ACTIVE:
        if is_wait_for_new_players[0] == IsInGameNow.IN_GAME:
            await bot.send_message(me.chat.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å")
            return
        elif is_wait_for_new_players[0] == IsInGameNow.INACTIVE:
            await bot.send_message(me.chat.id,
                                   "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞... –ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –Ω–∞—à —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
            return
    elif is_wait_for_new_players[0] == IsInGameNow.ACTIVE:
        c.execute(f'''DELETE FROM chat_{chat_id} WHERE user_id = {user_id}''')
        conn.commit()
        c.execute(f'''UPDATE users SET is_in_game = 0 WHERE user_id = {user_id}''')
        conn.commit()
        await bot.send_message(me.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –∏–≥—Ä—É")


@bot.message_handler(content_types=['new_chat_members'])
async def mi(message):
    for new_member in message.new_chat_members:
        if new_member.id == 7790371742:
            chat_id = message.chat.id
            print(chat_id)
            chat_name = message.chat.title
            c.execute(f'''INSERT OR IGNORE INTO chats (chat_id, is_in_game, chat_name) VALUES (?, ?, ?)''',
                      (-1 * chat_id, IsInGameNow.INACTIVE, chat_name))
            conn.commit()
            welcome_message = (
                "<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–£–ù–ö–ï–†!</b>\n\n"
                "üåç –ó–¥–µ—Å—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ —Ä—É–∏–Ω—ã –º–∏—Ä–∞, –≥–¥–µ –≤—ã–∂–∏–≤–∞–Ω–∏–µ ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–∫–æ–Ω. –í–∞—Å –∂–¥—ë—Ç —Å—É—Ä–æ–≤–∞—è –±–æ—Ä—å–±–∞ –∑–∞ –º–µ—Å—Ç–æ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π –Ω–∞—à–µ–≥–æ —É–∫—Ä—ã—Ç–∏—è. –ù–æ –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã ‚Äî –∫–∞–∂–¥—ã–π —à–∞–≥ –º–æ–∂–µ—Ç –æ–∫–∞–∑–∞—Ç—å—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º...\n\n"
                "<b>üéÆ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:</b>\n"
                "1. –í–∞—à–∞ —Ü–µ–ª—å ‚Äî –≤—ã–∂–∏—Ç—å –∏ –∑–∞–Ω—è—Ç—å –æ–¥–Ω–æ –∏–∑ –Ω–µ–º–Ω–æ–≥–∏—Ö –º–µ—Å—Ç –≤ –Ω–∞—à–µ–º –±—É–Ω–∫–µ—Ä–µ.\n"
                "2. –í –∏–≥—Ä–µ —É—á–∞—Å—Ç–≤—É—é—Ç –æ—Ç 4 –¥–æ 16 —á–µ–ª–æ–≤–µ–∫.\n"
                "3. –ö–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É –≤—ã–¥–∞—ë—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –æ—Å–æ–±—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏.\n"
                "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –∏ —É–±–µ–∂–¥–µ–Ω–∏—è, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã—Ö, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç–µ –æ—Å—Ç–∞—Ç—å—Å—è.\n"
                "5. –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Ä–µ—à–∏—Ç —Å—É–¥—å–±—É –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞... –ö—Ç–æ –∂–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –∂–∏–≤—ã—Ö?\n\n"
                "üî• –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –±–æ—Ä—å–±–µ –∑–∞ –∂–∏–∑–Ω—å! –ö–æ–º–∞–Ω–¥–∞ /new_game –∑–∞–ø—É—Å—Ç–∏—Ç –Ω–æ–≤—É—é –ø–∞—Ä—Ç–∏—é, –∞ –∫–æ–º–∞–Ω–¥–∞ /help –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
            )

            await bot.send_message(chat_id, welcome_message, parse_mode="HTML")
            x = await which_chat_with_logs()
            await bot.send_message(x, f'–ë–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {message.chat.title}')


async def about_user(user_id, table_chat_id):
    c.execute(f'''SELECT user_title, baggage, baggage_on, health, health_on,
                  facts, facts_on, hobby, hobby_on, profession, biology, biology_on
                  FROM chat_{table_chat_id} WHERE user_id = ?''', (user_id,))
    user_data = c.fetchone()
    user_name, *card_data = user_data

    message_text = f"*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–≥—Ä–æ–∫–µ {user_name}:*\n\n"

    for i in range(0, len(card_data), 2):
        card_type = ['baggage', 'health', 'facts', 'hobby', 'profession', 'biology'][i // 2]  # –î–æ–±–∞–≤–∏–ª–∏ biology
        card_value = card_data[i]
        card_open = card_data[i + 1]

        card_name = card_name_translation.get(card_type, card_type).capitalize()
        if card_open:
            message_text += f"‚Ä¢ *{card_name}:* {card_value}\n"
        else:
            message_text += f"‚Ä¢ *{card_name}:* –ó–∞–∫—Ä—ã—Ç–æ\n"

    try:
        await bot.send_message(chat_id, message_text)
    except Exception:
        await break_game(table_chat_id * (-1))
        return


async def cards(user_id, chat_id):
    table_chat_id = int(chat_id) * (-1)

    baggage = dictionaries.baggage[random.randint(1, len(dictionaries.baggage))]
    health = dictionaries.health[random.randint(1, len(dictionaries.health))]
    facts = dictionaries.facts[random.randint(1, len(dictionaries.facts))]
    profession = dictionaries.profession[random.randint(1, len(dictionaries.profession))]
    hobby = dictionaries.hobby[random.randint(1, len(dictionaries.hobby))]
    biology = dictionaries.biology[random.randint(1, len(dictionaries.biology))]  # –î–æ–±–∞–≤–∏–ª–∏ biology
    skills = dictionaries.skills[random.randint(1, len(dictionaries.skills))]

    c.execute(
        f'''UPDATE chat_{table_chat_id} SET baggage = ?, health = ?, facts = ?, profession = ?, hobby = ?, biology = ?, skills = ?
        WHERE user_id = ?''', (baggage, health, facts, profession, hobby, biology, skills, user_id))
    conn.commit()
    gif_filename = 'in_bunker.gif'
    gif_path = os.path.join("gifs", gif_filename)
    gif = open(gif_path, 'rb')
    message = f'–í–∞—à–∏ –∫–∞—Ä—Ç—ã: \n'\
              f'–ë–∞–≥–∞–∂ - {baggage}\n–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è - {health}\n–ù–∞–≤—ã–∫ - {skills}\n'\
              f'–§–∞–∫—Ç - {facts}\n–ü—Ä–æ—Ñ–µ—Å—Å–∏—è - {profession}\n–•–æ–±–±–∏ - {hobby}\n–ë–∏–æ–ª–æ–≥–∏—è - {biology}'
    await bot.send_animation(user_id, animation=gif, caption=message)


@bot.message_handler(commands=['rules'])
async def send_rules(message):
    rules_text = (
        "–ü–†–ê–í–ò–õ–ê –ò–ì–†–´ '–ë–£–ù–ö–ï–†' –í TELEGRAM\n\n"
        "–¶–µ–ª—å –∏–≥—Ä—ã:\n"
        "–í—ã–∂–∏—Ç—å –≤ —É—Å–ª–æ–≤–∏—è—Ö –ø–æ—Å—Ç-–∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å–∞, —É–±–µ–¥–∏–≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —á—Ç–æ –≤—ã –¥–æ—Å—Ç–æ–π–Ω—ã –º–µ—Å—Ç–∞ –≤ –±—É–Ω–∫–µ—Ä–µ.\n\n"

        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n"
        "–û—Ç 4 –¥–æ 16 –∏–≥—Ä–æ–∫–æ–≤.\n\n"

        "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞:\n"
        "1. –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –∏–≥—Ä–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /new_game –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ.\n"
        "2. –ë–æ—Ç –Ω–∞–∑–Ω–∞—á–∞–µ—Ç —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞–º –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, "
        "–∑–¥–æ—Ä–æ–≤—å–µ –∏ –¥—Ä—É–≥–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö.\n"
        "3. –í–µ–¥—É—â–∏–π - –±–æ—Ç, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã, —Å –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —Å—Ç–æ–ª–∫–Ω—É—Ç—å—Å—è –∏–≥—Ä–æ–∫–∞–º.\n\n"

        "–ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å:\n"
        "1. –ò–≥—Ä–æ–∫–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç —Å–≤–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–ª–∏ —á–∞—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö, –≤—ã–±–∏—Ä–∞—è –∫–∞—Ä—Ç—ã —Å –ø–æ–º–æ—â—å—é "
        "–∫–Ω–æ–ø–æ–∫.\n"
        "2. –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–∏—Ä—É–µ—Ç, –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –æ–Ω –¥–æ–ª–∂–µ–Ω –ø–æ–ø–∞—Å—Ç—å –≤ –±—É–Ω–∫–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –æ —Å–≤–æ–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ.\n"
        "3. –ò–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –∑–∞–¥–∞–≤–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥—É –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –≤—ã—è—Å–Ω–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏ –ø–æ–Ω—è—Ç—å –∫—Ç–æ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –∂–∏—Ç—å.\n"
        "4. –ü–æ –∏—Ç–æ–≥–∞–º –æ–±—Å—É–∂–¥–µ–Ω–∏–π –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–µ—à–∞—é—Ç, –∫—Ç–æ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É. –¢–æ—Ç, –∫—Ç–æ"
        " –Ω–∞–±–∏—Ä–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤, –≤—ã–±—ã–≤–∞–µ—Ç.\n"
        "5. –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —à–∞–≥–æ–≤ 1-4, –ø–æ–∫–∞ –Ω–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –±—É–Ω–∫–µ—Ä–∞.\n\n"

        "–ö–æ–Ω–µ—Ü –∏–≥—Ä—ã:\n"
        "–ò–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –æ—Å—Ç–∞—ë—Ç—Å—è –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –≤—ã–∂–∏–≤—à–∏–º–∏ –∏ –ø–æ–ø–∞–≤—à–∏–º–∏ –≤ "
        "–±—É–Ω–∫–µ—Ä.\n\n"

        "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–≥—Ä—ã:\n"
        "- /start ‚Äî –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.\n"
        "- /new_game [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤] ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É.\n"
        "- /stop_game ‚Äî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É.\n"
        "- /help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ.\n\n"

        "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:\n"
        "–≠—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∏–≥—Ä–æ–π –∏ —É–¥–∞—á–∏ –≤ –≤—ã–∂–∏–≤–∞–Ω–∏–∏!"
    )
    await bot.send_message(message.chat.id, rules_text)


@bot.message_handler(commands=['help'])
async def help_command(message):
    help_text = (
        "–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n\n"
        "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.\n"
        "/new_game [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤] - –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–æ—Ç 4 –¥–æ 16).\n"
        "/stop_game - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É.\n"
        "/rules - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã.\n"
        "/profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–≥—Ä–∞—Ö –∏ –æ—á–∫–∞—Ö.\n"
        "/settings - –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞.\n"
        "/shop - –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω, –≥–¥–µ –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∏–≥—Ä—ã. (–ü–æ–∫–∞ —á—Ç–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n"
        "/about_update - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥.\n\n"
        "\n–ö–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –ø—Ä–æ —ç—Ç–æ–≥–æ –±–æ—Ç–∞: t.me/bunker_bot_from_bebra\n"
    )
    await bot.send_message(message.chat.id, help_text, disable_web_page_preview=True)


@bot.message_handler(commands=['profile'])
async def profile(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    if await is_banned(user_id) is True:
        return
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–¥
    c.execute('''SELECT games_played, win_games, points, registration_date FROM users WHERE user_id = ?''', (user_id,))
    user_data = c.fetchone()

    if user_data is None:
        await bot.send_message(chat_id, "–í—ã –µ—â—ë –Ω–µ –∏–≥—Ä–∞–ª–∏ –Ω–∏ –≤ –æ–¥–Ω–æ–π –∏–≥—Ä–µ.")
        return

    games_played, win_games, points, registration_date = user_data
    registration_date = datetime.datetime.strptime(registration_date, '%Y-%m-%d %H:%M:%S')
    first_name = message.from_user.first_name
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥
    win_rate = (win_games / games_played) * 100 if games_played > 0 else 0
    win_rate = round(win_rate, 2)
    config = await load_config()
    osnova_text = str(config['profile_message']['text'])
    registration_date = registration_date.strftime('%d.%m.%Y %H:%M')
    text = f"{osnova_text.format(first_name=first_name, registration_date=registration_date, games_played=games_played, win_games=win_games, win_rate=win_rate, points=points)} "

    gif_filename = 'profile.jpg'
    gif_path = os.path.join("gifs", gif_filename)
    photo = open(gif_path, 'rb')

    await bot.send_photo(chat_id, photo=photo, caption=text, parse_mode="Markdown")


@bot.message_handler(commands=['shop'])
async def shop(me):
    if me.chat.type != 'private':
        return
    user_id = me.from_user.id
    if await is_banned(user_id) is True:
        return
    shop_message = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å –≤ –ø–æ—Å—Ç-–∞–ø–æ–∫–∞–ª–∏–ø—Ç–∏—á–µ—Å–∫–æ–º –º–∞–≥–∞–∑–∏–Ω–µ!\n –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ –∏–≥—Ä—É."
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–°–æ–±—ã—Ç–∏—è', callback_data="events"))
    await bot.send_message(user_id, shop_message, reply_markup=markup)


@bot.message_handler(commands=['settings'])
async def settings(message):
    if message.chat.type == "private":
        return
    user_id = message.from_user.id
    chat_id = message.chat.id
    table_chat_id = chat_id * -1
    admins = await bot.get_chat_administrators(chat_id)
    is_admin = any(admin.user.id == user_id for admin in admins)

    if not is_admin:
        await bot.send_message(chat_id, "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞")
        return

    c.execute(f"""SELECT open_time, discussion_time, voting_time, delete_message FROM chats WHERE chat_id = ?""", (table_chat_id,))
    open_time, discussion_time, voting_time, delete_message = c.fetchone()

    delete_message = bool(delete_message)

    if delete_message:
        is_delete = ""
    else:
        is_delete = "–Ω–µ "
    message = (f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Ç –ø–æ —Å–≤–æ–µ–º—É –∂–µ–ª–∞–Ω–∏—é, –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –≤—Ö–æ–¥—è—Ç: \n"
               f"–í—Ä–µ–º—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞–º–∏ —Å–≤–æ–∏—Ö –∫–∞—Ä—Ç: {discussion_time}\n"
               f"–í—Ä–µ–º—è –Ω–∞ –≤—Å–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç: {open_time}\n"
               f"–í—Ä–µ–º—è –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: {voting_time}\n"
               f"–°–µ–π—á–∞—Å –±–æ—Ç {is_delete}—É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–±—ã–≤—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤\n"
               f"–î–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É")

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="–í—Ä–µ–º—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è", callback_data="time_for_cards_0"))
    markup.add(types.InlineKeyboardButton(text="–í—Ä–µ–º—è –Ω–∞ –≤—Å–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç", callback_data="time_for_open_cards_0"))
    markup.add(types.InlineKeyboardButton(text="–í—Ä–µ–º—è –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", callback_data="time_for_voting_0"))
    markup.add(types.InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data=f"delete_message_0"))
    markup.add(types.InlineKeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="reset_settings"))
    await bot.send_message(chat_id, message, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "settings")
async def call_settings(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    table_chat_id = chat_id * -1
    admins = await bot.get_chat_administrators(chat_id)
    is_admin = any(admin.user.id == user_id for admin in admins)

    if not is_admin:
        await bot.answer_callback_query(call.id, "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–∞—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", show_alert=True)
        return

    c.execute(f"""SELECT open_time, discussion_time, voting_time, delete_message FROM chats WHERE chat_id = ?""", (table_chat_id,))
    open_time, discussion_time, voting_time, delete_message = c.fetchone()

    delete_message = bool(delete_message)

    if delete_message:
        is_delete = ""
    else:
        is_delete = "–Ω–µ "
    message = (f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Ç –ø–æ —Å–≤–æ–µ–º—É –∂–µ–ª–∞–Ω–∏—é, –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –≤—Ö–æ–¥—è—Ç: \n"
               f"–í—Ä–µ–º—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞–º–∏ —Å–≤–æ–∏—Ö –∫–∞—Ä—Ç: {discussion_time}\n"
               f"–í—Ä–µ–º—è –Ω–∞ –≤—Å–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç: {open_time}\n"
               f"–í—Ä–µ–º—è –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: {voting_time}\n"
               f"–°–µ–π—á–∞—Å –±–æ—Ç {is_delete}—É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–±—ã–≤—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤\n"
               f"–î–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É")

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="–í—Ä–µ–º—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è", callback_data="time_for_cards_0"))
    markup.add(types.InlineKeyboardButton(text="–í—Ä–µ–º—è –Ω–∞ –≤—Å–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç", callback_data="time_for_open_cards_0"))
    markup.add(types.InlineKeyboardButton(text="–í—Ä–µ–º—è –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", callback_data="time_for_voting_0"))
    markup.add(types.InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data=f"delete_message_0"))
    markup.add(types.InlineKeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="reset_settings"))
    await bot.edit_message_text(message, chat_id, call.message.id, parse_mode='HTML', reply_markup=markup)


@bot.message_handler(commands=["about_update"])
async def about_update(message):
    chat_id = message.chat.id
    config = await load_config()

    message_text = config["about_update"]["text"]
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(config["tg_channel"]["text"], callback_data=config["tg_channel"]["url"]))
    await bot.send_message(chat_id, message_text, reply_markup=markup)


@bot.message_handler(commands=['stop_game'])
async def stop_game(message):
    if message.chat.type == 'private':
        return

    user_id = message.from_user.id
    if await is_banned(user_id) is True:
        return

    chat_id = message.chat.id
    safe_chat_id = int(chat_id) * (-1)

    admins = await bot.get_chat_administrators(chat_id)

    is_admin = any(admin.user.id == user_id for admin in admins)

    if not is_admin:
        await bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–≥—Ä—ã.")
        return
    c.execute("""SELECT is_in_game FROM chats WHERE chat_id = ?""", (safe_chat_id, ))
    is_in_game = c.fetchone()[0]
    if is_in_game != IsInGameNow.INACTIVE:
        c.execute('''UPDATE chats SET is_in_game = ? WHERE chat_id = ?''', (IsInGameNow.INACTIVE, safe_chat_id))
        conn.commit()
        await bot.send_message(chat_id, '–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ')
        for user_id, user_name in await is_alive(safe_chat_id):
            c.execute(F'''UPDATE users SET is_in_game = 0 WHERE user_id = {user_id}''')
            conn.commit()
        try:
            c.execute(f'''DROP TABLE IF EXISTS chat_{safe_chat_id}''')
            conn.commit()
        except Exception:
            pass
    else:
        await bot.send_message(chat_id, "–í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä–∞ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∞—Å—å")


async def break_game(chat_id):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É –≤ —á–∞—Ç–µ."""
    table_chat_id = -1 * chat_id
    c.execute(f'''SELECT user_id FROM chat_{table_chat_id}''')
    user_ids = [row[0] for row in c.fetchall()]
    for user_id, user_name in await is_alive(table_chat_id):
        try:
            c.execute(F'''UPDATE users SET is_in_game = 0 WHERE user_id = {user_id}''')
            config = await load_config()
            message = str(config['game_interrupted']['text'])
            await bot.send_message(user_id, message)
        except Exception:
            pass

    c.execute(f'''UPDATE chats SET is_in_game = ? WHERE chat_id = ?''', (IsInGameNow.INACTIVE, table_chat_id))
    c.execute(f'''DROP TABLE IF EXISTS chat_{table_chat_id}''')
    await reset_player_status(user_ids)
    conn.commit()


async def reset_player_status(user_ids):
    if user_ids:
        for user_id in user_ids:
            c.execute('''UPDATE users SET is_in_game = 0 WHERE user_id = ?''', (user_id,))
            conn.commit()


@bot.message_handler(commands=['ban', 'unban'])
async def ban_unban_user(message):
    """
    –ë–∞–Ω–∏—Ç –∏–ª–∏ —Ä–∞–∑–±–∞–Ω–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–≥—Ä–µ.
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å –ø—Ä–∞–≤–æ–º can_ban_people.
    –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Å —Ä–µ–ø–ª–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–∞–∫ –∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º ID.
    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç –±–∞–Ω–∏—Ç—å –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∫—Ä–æ–º–µ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞).
    """
    user_id = message.from_user.id
    chat_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º —Å –ø—Ä–∞–≤–æ–º –±–∞–Ω–∏—Ç—å
    c.execute('''SELECT can_ban_people, is_main FROM admins WHERE user_id = ?''', (user_id,))
    admin_data = c.fetchone()

    if admin_data is None or not admin_data[0]:
        await bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –±–∞–Ω–∞/—Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    is_main_admin = admin_data[1]  # True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –≥–ª –∞–¥–º–∏–Ω

    if message.reply_to_message is not None:
        # –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ —Ä–µ–ø–ª–∞—è
        target_user_id = message.reply_to_message.from_user.id
    else:
        # –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        try:
            target_user_id = int(message.text.split()[1])
        except (IndexError, ValueError):
            await bot.send_message(chat_id,
                                   "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞/—Ä–∞–∑–±–∞–Ω–∞: /ban {user_id} –∏–ª–∏ /unban {user_id}")
            return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∂–µ—Ä—Ç–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    c.execute('''SELECT is_main FROM admins WHERE user_id = ?''', (target_user_id,))
    target_admin_data = c.fetchone()

    if target_admin_data is not None and target_admin_data[0] and not is_main_admin:
        await bot.send_message(chat_id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –±–∞–Ω–∏—Ç—å/—Ä–∞–∑–±–∞–Ω–∏–≤–∞—Ç—å –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    if message.text.startswith('/ban'):
        # –ë–∞–Ω–∏–º
        c.execute('''UPDATE users SET is_banned = True WHERE user_id = ?''', (target_user_id,))
        action = "–∑–∞–±–∞–Ω–µ–Ω"
    elif message.text.startswith('/unban'):
        # –†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º
        c.execute('''UPDATE users SET is_banned = False WHERE user_id = ?''', (target_user_id,))
        action = "—Ä–∞–∑–±–∞–Ω–µ–Ω"
    else:
        return

    conn.commit()
    x = await which_chat_with_logs()
    await bot.send_message(x, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {create_user_link(target_user_id, '–ò–≥—Ä–æ–∫')} –±—ã–ª {action} "
                              f"–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {create_user_link(user_id, '–ê–¥–º–∏–Ω')}", parse_mode='HTML')

    await bot.send_message(chat_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –±—ã–ª {action}.")


@bot.message_handler(commands=['add_admin'])
async def add_admin(message):
    user_id = message.from_user.id
    admin_table = 'admins'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    c.execute(f'''SELECT is_main FROM {admin_table} WHERE user_id = ?''', (user_id,))
    is_main = c.fetchone()

    if is_main is None or not is_main[0]:
        await bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')
        return

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        args = message.text.split(' ')
        target_user_id = int(args[1])
        change_status = bool(int(args[2]))
        ban_people = bool(int(args[3]))
        is_main_flag = bool(int(args[4]))
    except (IndexError, ValueError):
        await bot.send_message(message.chat.id,
                               '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /add_admin {user_id} {change_status} {ban_people} {is_main}\n'
                               '–ì–¥–µ {change_status}, {ban_people}, {is_main} 0 –∏–ª–∏ 1.')
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    c.execute(f'''SELECT user_id FROM {admin_table} WHERE user_id = ?''', (target_user_id,))
    existing_admin = c.fetchone()

    if existing_admin:
        # –û–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –ø—Ä–∞–≤–∞
        c.execute(f'''
            UPDATE {admin_table}
            SET can_change_status_of_game = ?, can_ban_people = ?, is_main = ?
            WHERE user_id = ?''', (change_status, ban_people, is_main_flag, target_user_id))
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        c.execute(f'''
            INSERT INTO {admin_table} (user_id, can_change_status_of_game, can_ban_people, is_main)
            VALUES (?, ?, ?, ?)''', (target_user_id, change_status, ban_people, is_main_flag))

    conn.commit()
    x = await which_chat_with_logs()
    await bot.send_message(x, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {create_user_link(target_user_id, '–ê–¥–º–∏–Ω')} –±—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω "
                              f"–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {create_user_link(user_id, '–ê–¥–º–∏–Ω')}", parse_mode='HTML')
    await bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {create_user_link(target_user_id, '–ê–¥–º–∏–Ω')} "
                                            f"–±—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {create_user_link(user_id, '–ê–¥–º–∏–Ω')}.",
                           parse_mode='HTML')


@bot.message_handler(commands=['del_admin'])
async def remove_admin(message):
    admin_table = 'admins'
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    c.execute(f'''SELECT is_main FROM {admin_table} WHERE user_id = ?''', (user_id,))
    existing_admin = c.fetchone()
    if existing_admin is None:
        return
    elif existing_admin[0] is False:
        await bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.')
        return

    try:
        args = message.text.split(' ')
        target_user_id = int(args[1])
    except (IndexError, ValueError):
        await bot.send_message(message.chat.id,
                               '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /del_admin {user_id}')
        return

    # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    c.execute(f'''DELETE FROM {admin_table} WHERE user_id = ?''', (target_user_id,))
    conn.commit()

    x = await which_chat_with_logs()
    await bot.send_message(x, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {create_user_link(target_user_id, '–ê–¥–º–∏–Ω')} –±—ã–ª —Å–Ω—è—Ç "
                              f"–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {create_user_link(user_id, '–ê–¥–º–∏–Ω')}", parse_mode='HTML')
    await bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {create_user_link(target_user_id, '–ê–¥–º–∏–Ω')} –±—ã–ª —Å–Ω—è—Ç "
                                            f"–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {create_user_link(user_id, '–ê–¥–º–∏–Ω')}", parse_mode='HTML')


@bot.message_handler(commands=['list_admins'])
async def list_admins(message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    c.execute(f'''SELECT can_change_status_of_game FROM admins WHERE user_id = ?''', (user_id,))
    is_admin = c.fetchone()

    if not is_admin:
        await bot.send_message(chat_id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.')
        return

    c.execute('''SELECT user_id, can_change_status_of_game, can_ban_people, is_main FROM admins''')
    admins = c.fetchall()

    if not admins:
        await bot.send_message(chat_id, '–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.')
        return

    message_text = "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n"
    for admin in admins:
        admin_id, can_change, can_ban, is_main = admin
        admin_status = "(–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)" if is_main else ""
        message_text += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {admin_id} {admin_status}\n" \
                        f"  –ú–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã: {'–î–∞' if can_change else '–ù–µ—Ç'}\n" \
                        f"  –ú–æ–∂–µ—Ç –±–∞–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤: {'–î–∞' if can_ban else '–ù–µ—Ç'}\n" \
                        f"  –°—Å—ã–ª–∫–∞: {create_user_link(admin_id, '–ê–¥–º–∏–Ω')}\n"

    await bot.send_message(chat_id, message_text, parse_mode='HTML')


@bot.message_handler(commands=['set_log_chat'])
async def set_log_chat(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    c.execute(f'''SELECT is_main FROM admins WHERE user_id = ?''', (user_id,))
    result = c.fetchone()
    if result is None or not result[0]:
        await bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ID –ª–æ–≥-—á–∞—Ç–∞.")
        return

    x = await which_chat_with_logs()
    await bot.send_message(x, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {create_user_link(user_id, '–ê–¥–º–∏–Ω')} —Å–æ–∑–¥–∞–ª –Ω–æ–≤—ã–π —á–∞—Ç –ª–æ–≥–æ–≤: "
                              f"{chat_id}", parse_mode='HTML')

    c.execute('''UPDATE admin_info SET log_chat_id = ?''', (chat_id,))
    conn.commit()

    await bot.send_message(chat_id, f"ID –ª–æ–≥-—á–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {chat_id}.")


@bot.message_handler(commands=['restore_admin'])
async def restore_admin(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ–¥
    try:
        reserv_code = message.text.split()[1]
    except IndexError:
        await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ–¥: /restore_admin {–∫–æ–¥}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ–¥ –≤ –±–¥
    c.execute('''SELECT reserv_code FROM admin_info''')
    stored_code = c.fetchone()

    if stored_code is None or stored_code[0] != reserv_code:
        await bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ–¥.")
        return

    # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–ª –∞–¥–º–∏–Ω–æ–º
    c.execute('''DELETE FROM admins''')
    c.execute(f'''INSERT INTO admins (user_id, can_change_status_of_game, can_ban_people, is_main)
                  VALUES (?, ?, ?, ?)''', (user_id, True, True, True))
    new_reserv_code = ''.join(random.choices(string.ascii_letters + string.digits, k=50))
    c.execute('''UPDATE admin_info SET reserv_code = ?''', (new_reserv_code,))
    conn.commit()
    x = await which_chat_with_logs()
    await bot.send_message(x, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª —Å–µ–±—è –≤ –ø—Ä–∞–≤–∞—Ö")
    await bot.send_message(chat_id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–∞–∫ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ù–æ–≤—ã–π —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ–¥: "
                                    f"{new_reserv_code}")


@bot.message_handler(commands=['change_games'])
async def stop_all_games(me):
    user_id = me.from_user.id
    chat_id = me.chat.id
    c.execute(f'''SELECT can_change_status_of_game FROM admins WHERE user_id = {user_id}''')
    result = c.fetchone()

    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    if result is None:
        await bot.send_message(chat_id, '–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if result[0] == 0:
        await bot.send_message(chat_id, '–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')
        return
    elif result[0] == 1:
        c.execute(f'''SELECT game_stop FROM admin_info''')
        result = c.fetchone()

        if result is None:
            await bot.send_message(chat_id, '–û—à–∏–±–∫–∞, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã.')
            return

        if not result[0]:  # –ï—Å–ª–∏ game_stop —Ä–∞–≤–µ–Ω False
            c.execute(f'''UPDATE admin_info SET game_stop = True ''')
            conn.commit()
            c.execute(f'''UPDATE chats SET is_in_game = "{IsInGameNow.INACTIVE}"''')
            conn.commit()
            c.execute(f'''SELECT chat_id FROM chats WHERE is_in_game = "{IsInGameNow.IN_GAME}"''')
            c.execute(f'''UPDATE users SET is_in_game = 0''')
            conn.commit()
            chat_results = c.fetchall()
            for chat_tuple in chat_results:
                chat_id = -1 * chat_tuple[0]
                try:
                    await bot.send_message(chat_id, '–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –ø—Ä–µ—Ä–≤–∞–Ω–Ω—É—é –∏–≥—Ä—É. '
                                                    '–ë–æ —Ç –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —Ä–µ—à–µ–Ω–∏—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ '
                                                    '–¥–ª—è —Ä–µ—à–µ–Ω–∏—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–±–ª–µ–º. –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å '
                                                    '–±–æ—Ç–∞ –¥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ —Ä–µ—à–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π '
                                                    '–≤–∞–º —Å—é–¥–∞: ')
                except Exception:
                    pass
            await bot.send_message(chat_id, f'''–í—Å–µ –∏–≥—Ä—ã –±—ã–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ''')
        elif result[0]:  # –ï—Å–ª–∏ game_stop —Ä–∞–≤–µ–Ω True
            c.execute(f'''UPDATE admin_info SET game_stop = False ''')
            await bot.send_message(chat_id, '–ë–æ—Ç —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ.')
        x = await which_chat_with_logs()
        await bot.send_message(x, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {create_user_link(user_id, '–ê–¥–º–∏–Ω')} —Å–º–µ–Ω–∏–ª —Ä–µ–∂–∏–º –∏–≥—Ä",
                               parse_mode='HTML')


@bot.message_handler(commands=['send_add'])
async def change_add(me):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ —á–∞—Ç—ã, –≥–¥–µ –¥–æ–±–∞–≤–ª–µ–Ω –±–æ—Ç.
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    user_id = me.from_user.id
    first_chat = me.chat.id

    c.execute('''SELECT is_main FROM admins WHERE user_id = ?''', (user_id,))
    is_main_admin = c.fetchone()

    if is_main_admin is None or not is_main_admin[0]:
        await bot.send_message(me.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–ª–∞–º—ã.")
        return

    message = me.reply_to_message
    if message is None:
        await bot.send_message(me.chat.id, "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ä–µ–∫–ª–∞–º—É.")
        return

    c.execute("SELECT chat_id FROM chats")
    chat_ids = [row[0] for row in c.fetchall()]

    successful_sends = 0
    failed_sends = 0

    for chat_id in chat_ids:
        try:
            await bot.copy_message(-1 * chat_id, first_chat, message.message_id)
            successful_sends += 1
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
        except Exception as e:
            failed_sends += 1
            if '403' in str(e):
                c.execute('''DELETE FROM chats WHERE chat_id = ?''', (chat_id,))

    await bot.send_message(me.chat.id, f"–†–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {successful_sends} —á–∞—Ç–æ–≤. "
                                       f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ {failed_sends} —á–∞—Ç–æ–≤.")


@bot.message_handler(commands=['statistics'])
async def get_statistics(message):
    user_id = message.from_user.id
    c.execute('SELECT user_id FROM admins WHERE user_id = ?', (user_id,))
    result = c.fetchone()
    if result is None or not result[0]:
        await bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    c.execute('SELECT COUNT(*) FROM users')
    total_users = c.fetchone()[0]

    c.execute('SELECT COUNT(*) FROM users WHERE games_played > 0')
    active_users = c.fetchone()[0]

    c.execute('SELECT COUNT(*) FROM chats')
    total_chats = c.fetchone()[0]

    # –¢–æ–ø 3 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–æ–±–µ–¥–∞–º
    c.execute('''SELECT user_id, win_games FROM users 
                 ORDER BY win_games DESC LIMIT 3''')
    top_winners = c.fetchall()

    # –¢–æ–ø 3 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ—á–∫–∞–º
    c.execute('''SELECT user_id, points FROM users 
                 ORDER BY points DESC LIMIT 3''')
    top_points = c.fetchall()

    stats_message = (
        f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        f"üë• *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {total_users}\n"
        f"üéÆ *–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {active_users}\n"
        f"üí¨ *–í—Å–µ–≥–æ —á–∞—Ç–æ–≤:* {total_chats}\n\n"
    )

    stats_message += "ü•á *–¢–æ–ø-3 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–æ–±–µ–¥–∞–º:*\n"
    for idx, (user_id, wins) in enumerate(top_winners, 1):
        stats_message += f"{idx}. {create_user_link(user_id, f'–ò–≥—Ä–æ–∫ {user_id}')} ‚Äî {wins} –ø–æ–±–µ–¥\n"

    stats_message += "\nüí∞ *–¢–æ–ø-3 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ—á–∫–∞–º:*\n"
    for idx, (user_id, points) in enumerate(top_points, 1):
        stats_message += f"{idx}. {create_user_link(user_id, f'–ò–≥—Ä–æ–∫ {user_id}')} ‚Äî {points} –æ—á–∫–æ–≤\n"

    await bot.send_message(message.chat.id, stats_message, parse_mode="HTML")


@bot.message_handler(func=lambda message: True)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_all_messages(message):
    if message.chat.type == 'private':
        return

    chat_id = message.chat.id
    user_id = message.from_user.id

    try:
        c.execute("SELECT name FROM sqlite_master WHERE type='table' AND name=?", (f"chat_{str(-1 * chat_id)}",))
        if c.fetchone() is None:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥—ë—Ç –ª–∏ –∏–≥—Ä–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –∏ –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        c.execute(f'''SELECT is_in_game, delete_message FROM chats WHERE chat_id = ?''', (-1 * chat_id, ))
        is_in_game, delete_message = c.fetchone()
        if is_in_game != IsInGameNow.IN_GAME:
            return
        if not delete_message:
            return
        admins = await bot.get_chat_administrators(chat_id)
        admin_ids = [admin.user.id for admin in admins]
        # –ò–≥—Ä–∞ –∏–¥—ë—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∂–∏–≤ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        c.execute(f'''SELECT is_alive FROM chat_{-1 * chat_id} WHERE user_id = ?''', (user_id,))
        is_user_alive = c.fetchone()
        if is_user_alive is None:
            is_user_alive = False
        else:
            is_user_alive = bool(is_user_alive[0])
        if is_user_alive is True:
            return
        if user_id not in admin_ids:
            try:
                await bot.delete_message(chat_id, message.message_id)
                await bot.restrict_chat_member(chat_id, user_id, until_date=int(time.time()) + 60,
                                               can_send_messages=False,
                                               can_send_media_messages=False,
                                               can_send_other_messages=False,
                                               can_add_web_page_previews=False)
            except Exception:
                pass
        else:
            if not message.text.startswith('!'):
                try:
                    await bot.delete_message(chat_id, message.message_id)
                except Exception:
                    pass

    except Exception as e:
        x = await which_chat_with_logs()
        try:
            await bot.send_message(x, e)
        except Exception:
            pass


async def main():
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —á–∞—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    c.execute('''SELECT chat_id FROM chats''')
    chat_ids = c.fetchall()
    for chat_id_tuple in chat_ids:
        chat_id = chat_id_tuple[0]
        c.execute(f'''DROP TABLE IF EXISTS chat_{chat_id}''')
    c.execute(f'''UPDATE chats SET is_in_game = "{IsInGameNow.INACTIVE}"''')
    conn.commit()
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    c.execute("SELECT name FROM sqlite_master WHERE type='table'")
    tables = c.fetchall()
    for table in tables:
        table_name = table[0]
        if table_name.startswith("voting_in_chat_"):
            c.execute(f"DROP TABLE IF EXISTS {table_name}")
    conn.commit()
    c.execute('''SELECT user_id FROM users''')
    result = c.fetchall()
    if result:
        user_ids = [row[0] for row in result]
        await reset_player_status(user_ids)
    await bot.polling(non_stop=True)


if __name__ == '__main__':
    asyncio.run(main())
